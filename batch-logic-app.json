{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"APIServiceURL": {
			"type": "string",
			"metadata": {
				"description": "base URL of the Machine Learning job.  Should end right before the /jobs"
			}
		},
		"APIKey": {
			"type": "string"
		},
		"InputBlobConnection": {
			"type": "string"
		},
		"InputBlobFilepath": {
			"type": "string"
		},
		"OutputBlobConnection": {
			"type": "string"
		},
		"OutputBlobFilepath": {
			"type": "string"
		},
		"svcPlanName": {
			"type": "string",
			"metadata": {
				"description": "The name of the App Service plan to create for hosting the logic app."
			}
		},
		"sku": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Free",
				"Basic",
				"Standard",
				"Premium"
			],
			"metadata": {
				"description": "The pricing tier for the logic app."
			}
		},
		"svcPlanSize": {
			"defaultValue": "0",
			"type": "string",
			"allowedValues": [
				"0",
				"1",
				"2"
			],
			"metadata": {
				"description": "The instance size of the app."
			}
		}
	},
	"variables": {
		"$logicAppName": "MachineLearningBatch",
		"quote": "'"
	},
	"resources": [
		{
			"apiVersion": "2014-06-01",
			"name": "[parameters('svcPlanName')]",
			"type": "Microsoft.Web/serverfarms",
			"location": "[resourceGroup().location]",
			"tags": {
				"displayName": "AppServicePlan"
			},
			"properties": {
				"name": "[parameters('svcPlanName')]",
				"sku": "[parameters('sku')]",
				"workerSize": "[parameters('svcPlanSize')]",
				"numberOfWorkers": 1
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2015-02-01-preview",
			"name": "[variables('$logicAppName')]",
			"location": "[resourceGroup().location]",
			"tags": {
				"displayName": "LogicApp"
			},
			"properties": {
				"sku": {
					"name": "[parameters('sku')]",
					"plan": {
						"id": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/',parameters('svcPlanName'))]"
					}
				},
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2014-12-01-preview/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"triggers": {
						"recurrence": {
							"type": "Recurrence",
							"recurrence": {
								"frequency": "Hour",
								"interval": 1
							}
						}
					},
					"actions": {
						"http": {
							"type": "Http",
							"inputs": {
								"method": "POST",
								"uri": "[concat(parameters('APIServiceURL'), '/jobs?api-version=2.0')]",
								"headers": {
									"Authorization": "[concat('Bearer ', parameters('APIKey'))]",
									"Content-Type": "application/json"
								},
								"body": {
									"GlobalParameters": {},
									"Input": {
										"ConnectionString": "[parameters('InputBlobConnection')]",
										"RelativeLocation": "[parameters('InputBlobFilepath')]"
									},
									"Outputs": {
										"output1": {
											"ConnectionString": "[parameters('OutputBlobConnection')]",
											"RelativeLocation": "[parameters('OutputBlobFilepath')]"
										}
									}
								}
							},
							"conditions": []
						},
						"http0": {
							"type": "Http",
							"inputs": {
								"method": "POST",
								"uri": "[concat(parameters('APIServiceURL'), '/jobs/@{actions(', variables('quote'), 'http', variables('quote'), ').outputs.body}/start?api-version=2.0')]",
								"headers": {
									"Authorization": "[concat('Bearer ', parameters('APIKey'))]",
									"Content-Type": "application/json"
								}
							},
							"conditions": [
								{
									"dependsOn": "http"
								}
							]
						},
						"http1": {
							"type": "Http",
							"inputs": {
								"method": "GET",
								"uri": "[concat(parameters('APIServiceURL'), '/jobs/@{actions(', variables('quote'), 'http', variables('quote'), ').outputs.body}?api-version=2.0')]",
								"headers": {
									"Authorization": "[concat('Bearer ', parameters('APIKey'))]"
								}
							},
							"until": {
								"limit": {
									"timeout": "PT5S",
									"count": 150
								},
								"conditions": [
									{
										"expression": "@equals(action().outputs.body.StatusCode, 'Finished')"
									}
								]
							},
							"conditions": [
								{
									"dependsOn": "http0"
								}
							]
						}
					},
					"outputs": {}
				},
				"parameters": {}
			}
		}
	],
	"outputs": {}
}
